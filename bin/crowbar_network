#!/usr/bin/env ruby
# Copyright 2011, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


require File.join(File.expand_path(File.dirname(__FILE__)), "barclamp_lib")
@barclamp = "network"

@commands["deallocate_ip"] = [ "deallocate_ip(ARGV.shift,ARGV.shift,ARGV.shift)", "deallocate_ip <name> <node> <network> - Deallocate an ip from a node on a network" ]
@commands["allocate_ip"] = [ "allocate_ip(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift)", "allocate_ip <name> <node> <network> <range> [<suggestion>] - Allocate an ip for a node on a network from a range" ]
@commands["enable_interface"] = [ "enable_interface(ARGV.shift,ARGV.shift,ARGV.shift)", "enable_interface <name> <node> <network> - Ensure that an interface is present for the specified network" ]
@commands["disable_interface"] = [ "disable_interface(ARGV.shift,ARGV.shift,ARGV.shift)", "disable_interface <name> <node> <network> - Ensure that an interface is not enabled for the specified network" ]
@commands["network_list"] = [ "network_list()", "network_list - Show a list of current networks" ]
@commands["network_show"] = [ "network_show(ARGV.shift)", "network_show <name_or_id> - Show a specific network" ]
@commands["network_create"] = [ "network_create(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift)", "network_create <name> <conduit_id> <subnet> <dhcp_enabled> <ip_ranges> <router_pref> <router_ip> - Create a network" ]
@commands["network_edit"] = [ "network_edit(ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift,ARGV.shift)", "network_edit <name_or_id> <conduit_id> <subnet> <dhcp_enabled> <ip_ranges> <router_pref> <router_ip> - Edit a network" ]
@commands["network_delete"] = [ "network_delete(ARGV.shift)", "network_delete <name_or_id> - Delete a network" ]

def enable_interface(name, node, network)
  usage -1 if name.nil? or name == ""
  usage -1 if node.nil? or node == ""
  usage -1 if network.nil? or network == ""

  @data = { "name" => node, "network" => network }.to_json
  struct = post_json("/enable_interface/#{name}", @data)

  if struct[1] == 200
    [ "Enabled interface #{name} #{struct[0].inspect}", 0 ]
  elsif struct[1] == 404
    [ "Failed to enable interface: #{name} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to enable interface: #{name} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "Failed to talk to service enable_interface: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def allocate_ip(name, node, network, range, suggestion)
  usage -1 if name.nil? or name == ""
  usage -1 if network.nil? or network == ""
  usage -1 if node.nil? or node == ""
  usage -1 if range.nil? or range == ""

  @data = { "name" => node, "network" => network, "range" => range }
  @data["suggestion"] = suggestion if suggestion
  @data = @data.to_json
  struct = post_json("/allocate_ip/#{name}", @data)

  if struct[1] == 200
    [ "Allocate ip #{name} #{struct[0].inspect}", 0 ]
  elsif struct[1] == 404
    [ "Failed to Allocate ip: #{name} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to Allocate ip: #{name} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "Failed to talk to service allocate_ip: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def deallocate_ip(name, node, network)
  usage -1 if name.nil? or name == ""
  usage -1 if network.nil? or network == ""
  usage -1 if node.nil? or node == ""

  @data = { "name" => node, "network" => network }.to_json
  struct = post_json("/deallocate_ip/#{name}", @data)

  if struct[1] == 200
    [ "Deallocate address #{network} #{node}", 0 ]
  elsif struct[1] == 404
    [ "Failed to deallocate ip: #{name} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to deallocate ip: #{name} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "Failed to talk to service deallocate_ip: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def disable_interface(name, node, network)
  usage -1 if name.nil? or name == ""
  usage -1 if node.nil? or node == ""
  usage -1 if network.nil? or network == ""

  @data = { "name" => node, "network" => network }.to_json
  struct = post_json("/disable_interface/#{name}", @data)

  if struct[1] == 200
    [ "Disable interface #{network} #{node}", 0 ]
  elsif struct[1] == 404
    [ "Failed to disable interface: #{name} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to disable interface: #{name} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "Failed to talk to service disable_interface: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def network_list()
  struct = get_json2("2.0/crowbar/2.0/network/networks")

  if struct[1] != 200
    [ "Failed to talk to service network list: #{struct[1]}: #{struct[0]}", 1 ]
  elsif struct[0].nil? or struct[0].empty?
    [ "No current networks", 0 ]
  else
    [ JSON.pretty_generate(struct[0]), 0]
  end
end

def network_show(id)
  usage -1 if id.nil? or id == ""

  struct = get_json2("2.0/crowbar/2.0/network/networks/#{id}")

  if struct[1] == 200
    [ "#{JSON.pretty_generate(struct[0])}", 0 ]
  elsif struct[1] == 404
    [ struct[0], 1 ]
  else
    [ "Unable to retrieve network #{id}: #{struct[1]} - #{struct[0]}", 1 ]
  end
end

def network_create(name, conduit_id, subnet, dhcp_enabled, ip_ranges, router_pref, router_ip)
  usage -1 if name.nil? or name == ""
  usage -1 if conduit_id.nil? or conduit_id == ""
  usage -1 if dhcp_enabled.nil? or dhcp_enabled == ""
  usage -1 if ip_ranges.nil? or ip_ranges == ""
  # router_pref is not required
  # router_ip is not required

  @data = {
      "name" => name,
      "conduit_id" => conduit_id,
      "subnet" => subnet,
      "dhcp_enabled" => dhcp_enabled,
      "ip_ranges" => ip_ranges,
      "router_pref" => router_pref,
      "router_ip" => router_ip
    }.to_json
  struct = post_json2("2.0/crowbar/2.0/network/networks", @data)

  if struct[1] == 200
    [ "Created network #{name}", 0 ]
  elsif struct[1] == 400
    [ "Failed to create network: #{name} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while creating the network: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def network_edit(name_or_id, conduit_id, subnet, dhcp_enabled, ip_ranges, router_pref, router_ip)
  usage -1 if name_or_id.nil? or name_or_id == ""
  usage -1 if conduit_id.nil? or conduit_id == ""
  usage -1 if dhcp_enabled.nil? or dhcp_enabled == ""
  usage -1 if ip_ranges.nil? or ip_ranges == ""
  # router_pref is not required
  # router_ip is not required

  @data = {
      "name" => name_or_id,
      "conduit_id" => conduit_id,
      "subnet" => subnet,
      "dhcp_enabled" => dhcp_enabled,
      "ip_ranges" => ip_ranges,
      "router_pref" => router_pref,
      "router_ip" => router_ip
    }.to_json

  struct = put_json2("2.0/crowbar/2.0/network/networks/#{name_or_id}", @data)

  if struct[1] == 200
    [ "Edited #{name_or_id}", 0 ]
  elsif struct[1] == 404
    [ "Failed to edit network: #{name_or_id} : Not Found", 1 ]
  elsif struct[1] == 400
    [ "Failed to edit network: #{name_or_id} : Errors in data\n#{struct[0]}", 1 ]
  else
    [ "An error occured while editing the network: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

def network_delete(name_or_id)
  usage -1 if name_or_id.nil? or name_or_id == ""

  struct = delete_json2("2.0/crowbar/2.0/network/networks/#{name_or_id}")

  if struct[1] == 200
    [ "Deleted network #{name_or_id}", 0 ]
  elsif struct[1] == 404
    [ struct[0], 1 ]
  else
    [ "Failed to talk to service network_delete: #{struct[1]}: #{struct[0]}", 1 ]
  end
end

main
